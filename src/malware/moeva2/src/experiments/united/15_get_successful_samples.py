import os
from itertools import combinations

import joblib
import numpy as np
import pandas as pd
from imblearn.under_sampling import RandomUnderSampler
from tqdm import tqdm

from src.attacks.moeva2.classifier import Classifier
from src.attacks.moeva2.objective_calculator import ObjectiveCalculator
from src.config_parser.config_parser import get_config
from src.experiments.botnet.features import augment_data
from src.experiments.botnet.model import train_model, print_score
from src.experiments.united.utils import get_constraints_from_str
from src.utils import filter_initial_states
from src.utils.in_out import load_model

np.random.seed(205)
import tensorflow as tf

tf.random.set_seed(206)

from sklearn.preprocessing import MinMaxScaler

# ----- CONFIG
config = get_config()
project_name = "malware"
nb_important_features = 5
threshold = 0.9
moeva_path = ""
gradient_path = ""
norm = 2
candidates_used = [0, none]
thresholds = {"f1": 0.9, "f2": 0.1}
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
# ----- LOAD

#x_train = np.load(f"./data/{project_name}/X_train.npy")
#x_test = np.load(f"./data/{project_name}/X_test.npy")
#y_train = np.load(f"./data/{project_name}/y_train.npy")
#y_test = np.load(f"./data/{project_name}/y_test.npy")
features = pd.read_csv(f"./data/{project_name}/features.csv")
constraints = pd.read_csv(f"./data/{project_name}/constraints.csv")


# ----- LOAD SCALER

scaler_path = f"./models/{project_name}/scaler.joblib"
scaler = joblib.load(scaler_path)

# ----- LOAD MODEL
model_path = f"./models/{project_name}/rf_model_clean.joblib"
model = load_model(model_path)

# ----- MODEL SCORE

#y_proba = model.predict_proba(scaler.transform(x_test)).reshape(-1)
#y_pred = (y_proba >= threshold).astype(int)
#print_score(y_test, y_pred)

# ----- LOAD CANDIDATES
x_candidates_path = f"./data/{project_name}/adversarial_cand_pgd.npy"
x_candidates = np.load(x_candidates_path)

# ----- LOAD Adversarials
x_moeva = np.load(moeva_path)
#gradient = np.load(gradient_path)

# ----- CREATE HELPER OBJECT
classifier = Classifier(model)
constraints_calculator = get_constraints_from_str(project_name)(
    f"./data/{project_name}/features.csv",
    f"./data/{project_name}/constraints.csv",
)
objective_calc = ObjectiveCalculator(
    classifier,
    constraints_calculator,
    minimize_class=1,
    thresholds=thresholds,
    min_max_scaler=scaler,
    ml_scaler=scaler,
    norm=norm,
)

# ----- RETRIEVE ADVS
x_candidates_used = filter_initial_states(
    x_candidates, candidates_used[0], candidates_used[1]
)

# ---- MOEVA
x_moeva_adv = objective_calc.get_successful_attacks(
    x_candidates_used, x_moeva, preferred_metrics="distance", order="asc", max_inputs=1)


np.save(f"./data/{project_name}/x_candidates_moeva.npy", x_moeva_adv)


