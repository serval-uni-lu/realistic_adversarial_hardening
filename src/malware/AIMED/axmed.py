#!/usr/bin/env python3
'''
Welcome to ARMED & AIMED: Automatic Random/Intelligent Malware Modifications to Evade Detection. 
AxMED were designed to understand how injecting random perturbations to Windows 
portable executable malware impact static classifiers without affecting the sample's 
functionality and thus keeping the new malware files valid. 

AIMED: https://ieeexplore.ieee.org/document/8887384 
ARMED: https://ieeexplore.ieee.org/document/8714698
'''

import os
import gp
import sys
from time import time
from shutil import copyfile
from datetime import datetime 
from argparse import ArgumentParser 
import pandas as pd
import numpy as np
import json

import functions as f
import implementation as i
import manipulate as m
from helpers import create_dfs

import warnings
warnings.filterwarnings("ignore")


def main(option):
	model_arch = 'random_forest'
	config_file = "config/random_forest/clean_val.json"  
	file = open(config_file)
	config = json.load(file)
	## Initializing two dataframes to save the information about the processed samples
	create_dfs(config, model_arch)
	
	samples = pd.read_csv(config["adversarial_paths"])['path']
	aimed_idx = np.load(config["adversarial_idx"])
	scaler_path = '../data/malware_scaler.pkl'

	for idx, sample in samples[config['start_idx']:config['end_idx']].iteritems():
		if idx not in aimed_idx:
			continue
		else:
			start_AIMED = time()
			sample = sample[:3] + 'datasets\\' + sample[3:]
			bin_bytes = f.readfile(sample) 
			i.aimed(bin_bytes, sample, config['size_population'], config['perturbations'], config['files_expected'], config['threshold'], config['model_path'], use_case, model_arch, scaler_path)
			print("AIMED finished generating evasive malware for sample ", idx)
			f.time_me(start_AIMED)
			
if __name__ == '__main__':
	main('AIMED')