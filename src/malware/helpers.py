import pandas as pd
import numpy as np
from joblib import load, dump
from sklearn import metrics


def adversarial_paths(file_paths, val_sha1,  path):
    val_sha1 = pd.DataFrame(val_sha1, columns = ['sample_sha1'])
    adv_paths = file_paths.merge(val_sha1, left_on='sha1', right_on='sample_sha1', how='inner')
    adv_paths['path'] = adv_paths['root']+'\\' + adv_paths['file']
    adv_paths[['sha1','path']].to_csv(path, index=False)

def get_predictions(model, test_X, threshold):
    neural_network = True
    if neural_network:
        scaler = load('data/malware_scaler.pkl')
        test_X = scaler.transform(test_X)
    predicted_proba = model.predict_proba(test_X)
    predictions = (predicted_proba[:,1] >= threshold).astype('int')
    return predictions

## Get adversarial paths for adversarial candidates in training  set
def get_adversarial_paths(clean_model, train_X, train_y, train_sha, size, path):
    predictions_train  = get_predictions(clean_model, train_X, threshold=0.9)
    adv_idx_train = np.squeeze(np.argwhere(((train_y==1) & (predictions_train==1))))
    adv_idx_train_trial = adv_idx_train[np.random.choice(len(adv_idx_train), size=size, replace=False)]
    #train_sha.reset_index(inplace=True, drop=False)
    adv_train_sha = train_sha[adv_idx_train_trial]
    file_paths = pd.read_csv('data\\file_path.csv')
    adversarial_paths(file_paths, adv_train_sha, path )

def get_adversarial_candidates_idx(val_y, predictions_val, path, val_sha,  adv_paths, cand_idx_500):
    #adv_idx = np.squeeze(np.argwhere(((val_y==1) & (predictions_val==1))))
    adv_idx = cand_idx_500
    adv_shas = val_sha[np.squeeze(adv_idx)]
    adv_paths = pd.read_csv(adv_paths)
    adv_shas=np.squeeze(adv_shas)
    adv_idx =  adv_paths[adv_paths.sha1.isin(adv_shas.tolist())].index
    np.save(path, adv_idx)

def get_metrics(test_y, predictions):
    roc_auc = metrics.roc_auc_score(test_y, predictions)
    f1 = metrics.f1_score(test_y, predictions)
    acc = metrics.accuracy_score(test_y, predictions)
    return acc, f1, roc_auc

def get_adversarial_axmed(info_df, features):
    succ  = info_df[info_df['score']<0.9]
    adv = succ.drop_duplicates(['modified_sample_path', 'original_sample_sha1']).groupby('original_sample_sha1').head(2)
    features_adv = features.iloc[adv.index].to_numpy()
    print(features_adv.shape)
    return features_adv

def get_adversarial_axmed_one(info_df, features):
    adv = info_df.iloc[info_df.groupby('original_sample_sha1').score.idxmin()] 
    features_adv = features.iloc[adv.index].to_numpy()
    return features_adv