import sys
import os

import numpy as np
import pandas as pd
import joblib
import pickle
from tensorflow.keras.optimizers import Adam
from keras.models import Sequential, Model, load_model
from keras.layers import Dense, Dropout, Input, Activation
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import f1_score,roc_curve, confusion_matrix, auc, roc_auc_score, accuracy_score

def scale_data():

    train_X = np.load('..\data\\training\\train_X.npy')
    test_X = np.load('..\data\\training\\test_X.npy')
    train_y = np.load('..\data\\training\\train_y.npy')
    test_y = np.load('..\data\\training\\test_y.npy')

    scaler = MinMaxScaler()
    data = np.concatenate((train_X, test_X))
    scaler.fit(data)
    X_train_scaled = scaler.transform(train_X)
    X_test_scaled = scaler.transform(test_X)

    np.save("..\data\\training\\scaled\\train_X_scaled.npy", X_train_scaled)
    np.save("..\data\\training\\scaled\\test_X_scaled.npy", X_test_scaled)

    joblib.dump(scaler, "..\data\\malware_scaler.pkl")

def build_model(units, lr_param):
    network = Sequential()
    network.add(Dense(units = units[0], activation = 'relu'))
    network.add(Dense(units = units[1], activation = 'relu'))
    network.add(Dense(units = 2,  activation = 'softmax'))
    network.compile(loss = 'binary_crossentropy', optimizer = Adam(lr = lr_param))
    return network

def get_nn_metrics(nn, x_test, y_test):
    probas = nn.predict(x_test)
    predictions = (probas[:,1]>= 0.9).astype(int)
    f1 = f1_score(y_test, predictions)
    roc_auc = roc_auc_score (y_test, predictions)
    tn, fp, fn, tp = confusion_matrix(y_test, predictions).ravel()
    acc = accuracy_score(y_test, predictions)
    metrics_obj = {'acc':acc,
                'f1':f1,
                'roc_auc': roc_auc,
                'fpr': fp/(fp+tn),
                'fnr': fn/(fn+tp)}
    print(metrics_obj)
    with open("malware_pgd_results.pickle", 'wb') as f:
        pickle.dump(metrics_obj, f)  

def get_mutability_mask():
    features_wm = pd.read_csv('..\data\\features_wm.csv')
    mutable = features_wm['mutable']
    mask = np.zeros(shape=(mutable.shape[0],))
    mutable_idx = mutable[mutable==True].index
    mask[mutable_idx.to_list()] = 1
    return mask

def save_predictions(model,path,data):
    probas = model.predict(data)
    y_pred = (probas[:,1]>= 0.9).astype(int)
    np.save(path, y_pred)

def load_data_pgd_attack(size, model_path, adv_cand_path, pred_path):
    nn = load_model(model_path)
    scaler = joblib.load("../data/malware_scaler.pkl")

    ### PGD adversarial
    malware_adv = np.load(adv_cand_path)
    malware_adv = np.squeeze(malware_adv)
    malware_adv = scaler.transform(malware_adv)

    save_predictions(nn, pred_path, malware_adv)
    y_pred = np.load(pred_path)
    return nn,malware_adv, scaler, y_pred