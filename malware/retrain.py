import numpy as np
from joblib import load, dump
from helpers import get_predictions, get_metrics, get_adversarial_axmed, get_adversarial_axmed_one
from sklearn.ensemble import RandomForestClassifier 
import pandas as pd

train_X = np.load('data\\training\\train_X.npy')
test_X = np.load('data\\training\\test_X.npy')
train_y = np.load('data\\training\\train_y.npy')
test_y = np.load('data\\training\\test_y.npy')


def retrain_model(features_adv, clean_model, train_X, train_y, test_X, test_y, retrained_path):
    clean_params = clean_model.get_params(deep=False)
    rf = RandomForestClassifier()
    rf.set_params(**clean_params)
    label_adv = np.ones(features_adv.shape[0])
    train_X_aug = np.concatenate([train_X, features_adv])
    train_y_aug = np.concatenate([train_y, label_adv])
    rf.fit(train_X_aug, train_y_aug)
    predictions = get_predictions(rf, test_X, threshold=0.9)
    acc, f1, roc_auc = get_metrics(test_y,predictions)
    print("Accuracy", acc)
    print("F1", f1)
    print("Roc AUC", roc_auc)
    dump(rf, retrained_path)

def retrain(features_adv, retrained_path):
    predictions = get_predictions(clean_model, features_adv, 0.9)
    idx = np.where(predictions==0)[0]
    features_adv_real = features_adv[idx]
    retrain_model(features_adv, clean_model, train_X, train_y, test_X, test_y, retrained_path)


if __name__ == '__main__':

    ### AXMED
    retrained_path = "data\\models\\rf_model_axmed_1500.joblib"
    features_train = pd.read_csv('AIMED\data\\out\\random_forest\\clean_train\\features\\features.csv') 
    info_train = pd.read_csv('AIMED\data\\out\\clean_train\\info\\info.csv')
    features_adv_train = get_adversarial_axmed_one(info_train, features_train)
    retrain_model(features_adv_train, clean_model, train_X, train_y, test_X, test_y, retrained_path)

    ### PGD 
    #features_adv = np.load("pgd\\adversarial\\unscaled\\pgd_adv_unscaled_6000.npy")
    #retrained_path = "data\\models\\rf_model_pgd_6000.joblib"
    #retrain(features_adv, retrained_path)


    
