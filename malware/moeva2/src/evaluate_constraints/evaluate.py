import numpy as np
from malware_constraints import evaluate_malware
from botnet_constraints import evaluate_botnet

import joblib

scaler = joblib.load(r'C:\Users\salijona.dyrmishi\constrained_malware_detection\botnet\data\scaler.pkl')
data_pgd = np.load(r'C:\Users\salijona.dyrmishi\constrained_malware_detection\botnet\data\perturb_samples_pgd_fat_targeted_clean_model_10epochs.npy')
data_neris = np.load(r'C:\Users\salijona.dyrmishi\constrained_malware_detection\botnet\data\perturbations_neris_clean_restricted.npy')
data_neris = scaler.inverse_transform(data_neris)
#print(data_neris.min(axis=0))
data_neris[data_neris<0]=0
#print(data_neris.min(axis=0))

def constraint_satisfaction( data ):
    #data = scaler.inverse_transform(data)
    print(data.shape)
    cons = evaluate_botnet(data)
    respect = cons.sum(axis=1)
    print(respect.shape)


    cons_idx = np.argwhere(respect<=0.0001)
    cons_rate = cons_idx.shape[0]/data.shape[0]*100
    print("Constraint satisfaction", cons_rate)
    return cons_rate

#samples = np.load('../../data/malware/moeva_adv_1500.npy')
constraint_satisfaction(data_neris)