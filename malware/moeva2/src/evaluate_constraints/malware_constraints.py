import numpy as np
import pickle

def evaluate_malware(x):
    # ----- PARAMETERS

    tol = 1e-3
    # should write a function in utils for this part
    with open("../../data/malware/idx/section_names_idx.pkl", "rb") as f:
        section_names_idx = pickle.load(f)

    with open("../../data/malware/idx/imports_idx.pkl", "rb") as f:
        imports_idx = pickle.load(f)

    with open("../../data/malware/idx/dll_imports_idx.pkl", "rb") as f:
        dll_imports_idx = pickle.load(f)

    with open("../../data/malware/idx/freq_idx.pkl", "rb") as f:
        freq_idx = pickle.load(f)

    # NumberOfSections equals the sum of sections names not set to 'none'(label encoded to 832)
    g1 = np.absolute(
        x[:, 12893] - np.count_nonzero(x[:, section_names_idx] != 832, axis=1)
    )
    #
    # # header_FileAlignment < header_SectionAlignment
    g2 = x[:, 13956] - x[:, 10840]

    # The value for FileAlignment should be a power of 2
    m = x[:, 13956]
    m = np.array(m, dtype=np.float)
    g3 = np.absolute(np.log2(m, out=np.zeros_like(m), where=(m != 0)) % 1 - 0)

    # # api_import_nb is higher than the sum of total imports that we have considered as features
    g4 = np.sum(x[:, imports_idx], axis=1) - x[:, 271]
    #
    # # api_dll_nb is higher than the sum of total dll that we have considered as features
    g5 = np.sum(x[:, dll_imports_idx], axis=1) - x[:, 8607]

    # # Sum of individual byte frequencies is equal to 1. There is a small  difference due to rounding effect
    g6 = np.absolute(1 - np.sum(x[:, freq_idx], axis=1))

    # FileEntropy is related to freqbytes through Shanon entropy
    m = x[:, freq_idx]
    m = np.array(m, dtype=np.float)
    # Log of freq_idx
    logarithm = np.log2(m, out=np.zeros_like(m), where=(m != 0))
    g7 = np.absolute(x[:, 23549] + np.sum(x[:, freq_idx] * logarithm, axis=1))

    constraints = np.column_stack([g1, g2, g3, g4, g5, g6, g7])
    constraints[constraints <= tol] = 0.0

    return constraints